{
  "address": "0xC223f4DFD28073d7E2f468C6c73177637603A5A4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "apy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserStake",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isStaked",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct Staking.Stake",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "legitMaxId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "periods",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isStaked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa6d7afd30ffe4017f3b6a6254fa251c1a6a4aaf9da6479722985bf19b2bbed66",
  "receipt": {
    "to": null,
    "from": "0x5F171e64077712951F7F814FC78AD2D1d84846B2",
    "contractAddress": "0xC223f4DFD28073d7E2f468C6c73177637603A5A4",
    "transactionIndex": 1,
    "gasUsed": "932634",
    "logsBloom": "0x
    "blockHash": "0xc77a24767c92dce23264da6b0e234c4a67578ab1596b9d14bcb79900b5490ac3",
    "transactionHash": "0xa6d7afd30ffe4017f3b6a6254fa251c1a6a4aaf9da6479722985bf19b2bbed66",
    "logs": [],
    "blockNumber": 30706329,
    "cumulativeGasUsed": "1597730",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC3afdF67769723de2b109FFbda1170267A6e9984"
  ],
  "numDeployments": 1,
  "solcInputHash": "9bd6e72a62c1ceaf55bc610dee3d3304",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStake\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legitMaxId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"kotsmile\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Staking\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.18;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\n/**\\n * @title Staking\\n * @author kotsmile\\n */\\ncontract Staking {\\n    using SafeERC20 for IERC20;\\n\\n    struct Stake {\\n        bool isStaked;\\n        uint256 id;\\n        uint256 amount;\\n        uint256 reward;\\n        uint256 timestamp;\\n    }\\n\\n    IERC20 public token;\\n\\n    uint256[] public periods = [30, 60, 90];\\n    uint256[] public apy = [120_00, 150_00, 180_00];\\n    uint256 public constant DENOMINATOR = 100_00; // 100%\\n\\n    uint256 public stakedAmount;\\n    uint256 public reservedRewards;\\n\\n    mapping(address => Stake) public users;\\n\\n    constructor(IERC20 _token) {\\n        token = _token;\\n    }\\n\\n    function stake(uint256 amount_, uint256 id) external {\\n        require(id < periods.length, 'Staking: invalid id');\\n        require(!users[msg.sender].isStaked, 'Staking: already staked');\\n\\n        uint256 amount = _receiveTokens(amount_);\\n        uint256 reward = (amount * apy[id]) / DENOMINATOR - amount;\\n\\n        require(rewardPool() >= reward, 'Staking: not enough rewards');\\n\\n        stakedAmount += amount;\\n        reservedRewards += reward;\\n\\n        Stake memory stake_ = Stake(true, id, amount, reward, block.timestamp);\\n        users[msg.sender] = stake_;\\n    }\\n\\n    function unstake() external {\\n        require(users[msg.sender].isStaked, 'Staking: not staked');\\n        require(\\n            users[msg.sender].timestamp + periods[users[msg.sender].id] <\\n                block.timestamp,\\n            'Staking: not ready'\\n        );\\n\\n        uint256 reward = users[msg.sender].reward;\\n        uint256 amount = users[msg.sender].amount;\\n\\n        stakedAmount -= amount;\\n        reservedRewards -= reward;\\n\\n        token.safeTransfer(msg.sender, amount + reward);\\n\\n        delete users[msg.sender];\\n    }\\n\\n    function _receiveTokens(uint256 amount) internal returns (uint256) {\\n        uint256 balanceBefore = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 balanceAfter = token.balanceOf(address(this));\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    function rewardPool() public view returns (uint256) {\\n        return token.balanceOf(address(this)) - stakedAmount - reservedRewards;\\n    }\\n\\n    function getUserStake(address user) external view returns (Stake memory) {\\n        return users[user];\\n    }\\n\\n    function legitMaxId() external view returns (uint256) {\\n        return periods.length;\\n    }\\n}\\n\",\"keccak256\":\"0x12a1127bcb452fd9279299c58d96333401cc45c30e56907afd7ba5fd6a57176d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052601e6080908152603c60a052605a60c05262000025906001906003620000ae565b5060408051606081018252612ee08152613a986020820152614650918101919091526200005790600290600362000103565b503480156200006557600080fd5b5060405162000e1b38038062000e1b83398101604081905262000088916200015e565b600080546001600160a01b0319166001600160a01b039290921691909117905562000190565b828054828255906000526020600020908101928215620000f1579160200282015b82811115620000f1578251829060ff16905591602001919060010190620000cf565b50620000ff92915062000147565b5090565b828054828255906000526020600020908101928215620000f1579160200282015b82811115620000f1578251829061ffff1690559160200191906001019062000124565b5b80821115620000ff576000815560010162000148565b6000602082840312156200017157600080fd5b81516001600160a01b03811681146200018957600080fd5b9392505050565b610c7b80620001a06000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063af5ce10411610071578063af5ce1041461016e578063b5539a1f14610177578063bbadc93a1461017f578063e75ac809146101d6578063ea4a1104146101e9578063fc0c546a146101fc57600080fd5b80632def6620146100b9578063373d6132146100c357806366666aa9146100df5780637b0472f0146100e7578063918f8674146100fa578063a87430ba14610103575b600080fd5b6100c1610227565b005b6100cc60035481565b6040519081526020015b60405180910390f35b6100cc6103b9565b6100c16100f5366004610a9b565b61044a565b6100cc61271081565b610144610111366004610abd565b6005602052600090815260409020805460018201546002830154600384015460049094015460ff90931693919290919085565b6040805195151586526020860194909452928401919091526060830152608082015260a0016100d6565b6100cc60045481565b6001546100cc565b61019261018d366004610abd565b610632565b6040516100d69190600060a0820190508251151582526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b6100cc6101e4366004610aed565b6106c3565b6100cc6101f7366004610aed565b6106e4565b60005461020f906001600160a01b031681565b6040516001600160a01b0390911681526020016100d6565b3360009081526005602052604090205460ff166102815760405162461bcd60e51b815260206004820152601360248201527214dd185ada5b99ce881b9bdd081cdd185ad959606a1b60448201526064015b60405180910390fd5b33600090815260056020526040902060019081015481544292919081106102aa576102aa610b06565b600091825260208083209091015433835260059091526040909120600401546102d39190610b32565b106103155760405162461bcd60e51b81526020600482015260126024820152715374616b696e673a206e6f7420726561647960701b6044820152606401610278565b33600090815260056020526040812060038082015460029092015481549293909283929190610345908490610b4b565b92505081905550816004600082825461035e9190610b4b565b909155506103859050336103728484610b32565b6000546001600160a01b031691906106f4565b5050336000908152600560205260408120805460ff1916815560018101829055600281018290556003810182905560040155565b60048054600354600080546040516370a0823160e01b8152309581019590955290936001600160a01b03909116906370a0823190602401602060405180830381865afa15801561040d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104319190610b5e565b61043b9190610b4b565b6104459190610b4b565b905090565b60015481106104915760405162461bcd60e51b815260206004820152601360248201527214dd185ada5b99ce881a5b9d985b1a59081a59606a1b6044820152606401610278565b3360009081526005602052604090205460ff16156104f15760405162461bcd60e51b815260206004820152601760248201527f5374616b696e673a20616c7265616479207374616b65640000000000000000006044820152606401610278565b60006104fc8361075c565b90506000816127106002858154811061051757610517610b06565b90600052602060002001548461052d9190610b77565b6105379190610b8e565b6105419190610b4b565b90508061054c6103b9565b101561059a5760405162461bcd60e51b815260206004820152601b60248201527f5374616b696e673a206e6f7420656e6f756768207265776172647300000000006044820152606401610278565b81600360008282546105ac9190610b32565b9250508190555080600460008282546105c59190610b32565b90915550506040805160a0810182526001808252602080830196875282840195865260608301948552426080840190815233600090815260059092529390209151825460ff1916901515178255945194810194909455915160028401555160038301555160049091015550565b6106666040518060a00160405280600015158152602001600081526020016000815260200160008152602001600081525090565b506001600160a01b0316600090815260056020908152604091829020825160a081018452815460ff161515815260018201549281019290925260028101549282019290925260038201546060820152600490910154608082015290565b600281815481106106d357600080fd5b600091825260209091200154905081565b600181815481106106d357600080fd5b6040516001600160a01b03831660248201526044810182905261075790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610865565b505050565b600080546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa1580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c99190610b5e565b6000549091506107e4906001600160a01b031633308661093a565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561082d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108519190610b5e565b905061085d8282610b4b565b949350505050565b60006108ba826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109789092919063ffffffff16565b90508051600014806108db5750808060200190518101906108db9190610bb0565b6107575760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610278565b6040516001600160a01b03808516602483015283166044820152606481018290526109729085906323b872dd60e01b90608401610720565b50505050565b606061085d848460008585600080866001600160a01b0316858760405161099f9190610bf6565b60006040518083038185875af1925050503d80600081146109dc576040519150601f19603f3d011682016040523d82523d6000602084013e6109e1565b606091505b50915091506109f2878383876109fd565b979650505050505050565b60608315610a6c578251600003610a65576001600160a01b0385163b610a655760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610278565b508161085d565b61085d8383815115610a815781518083602001fd5b8060405162461bcd60e51b81526004016102789190610c12565b60008060408385031215610aae57600080fd5b50508035926020909101359150565b600060208284031215610acf57600080fd5b81356001600160a01b0381168114610ae657600080fd5b9392505050565b600060208284031215610aff57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610b4557610b45610b1c565b92915050565b81810381811115610b4557610b45610b1c565b600060208284031215610b7057600080fd5b5051919050565b8082028115828204841417610b4557610b45610b1c565b600082610bab57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610bc257600080fd5b81518015158114610ae657600080fd5b60005b83811015610bed578181015183820152602001610bd5565b50506000910152565b60008251610c08818460208701610bd2565b9190910192915050565b6020815260008251806020840152610c31816040850160208701610bd2565b601f01601f1916919091016040019291505056fea2646970667358221220c516c5f364e504c2200128361ddf8b80872cbda172ba1cb8b9f04842e056d3fd64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063af5ce10411610071578063af5ce1041461016e578063b5539a1f14610177578063bbadc93a1461017f578063e75ac809146101d6578063ea4a1104146101e9578063fc0c546a146101fc57600080fd5b80632def6620146100b9578063373d6132146100c357806366666aa9146100df5780637b0472f0146100e7578063918f8674146100fa578063a87430ba14610103575b600080fd5b6100c1610227565b005b6100cc60035481565b6040519081526020015b60405180910390f35b6100cc6103b9565b6100c16100f5366004610a9b565b61044a565b6100cc61271081565b610144610111366004610abd565b6005602052600090815260409020805460018201546002830154600384015460049094015460ff90931693919290919085565b6040805195151586526020860194909452928401919091526060830152608082015260a0016100d6565b6100cc60045481565b6001546100cc565b61019261018d366004610abd565b610632565b6040516100d69190600060a0820190508251151582526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b6100cc6101e4366004610aed565b6106c3565b6100cc6101f7366004610aed565b6106e4565b60005461020f906001600160a01b031681565b6040516001600160a01b0390911681526020016100d6565b3360009081526005602052604090205460ff166102815760405162461bcd60e51b815260206004820152601360248201527214dd185ada5b99ce881b9bdd081cdd185ad959606a1b60448201526064015b60405180910390fd5b33600090815260056020526040902060019081015481544292919081106102aa576102aa610b06565b600091825260208083209091015433835260059091526040909120600401546102d39190610b32565b106103155760405162461bcd60e51b81526020600482015260126024820152715374616b696e673a206e6f7420726561647960701b6044820152606401610278565b33600090815260056020526040812060038082015460029092015481549293909283929190610345908490610b4b565b92505081905550816004600082825461035e9190610b4b565b909155506103859050336103728484610b32565b6000546001600160a01b031691906106f4565b5050336000908152600560205260408120805460ff1916815560018101829055600281018290556003810182905560040155565b60048054600354600080546040516370a0823160e01b8152309581019590955290936001600160a01b03909116906370a0823190602401602060405180830381865afa15801561040d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104319190610b5e565b61043b9190610b4b565b6104459190610b4b565b905090565b60015481106104915760405162461bcd60e51b815260206004820152601360248201527214dd185ada5b99ce881a5b9d985b1a59081a59606a1b6044820152606401610278565b3360009081526005602052604090205460ff16156104f15760405162461bcd60e51b815260206004820152601760248201527f5374616b696e673a20616c7265616479207374616b65640000000000000000006044820152606401610278565b60006104fc8361075c565b90506000816127106002858154811061051757610517610b06565b90600052602060002001548461052d9190610b77565b6105379190610b8e565b6105419190610b4b565b90508061054c6103b9565b101561059a5760405162461bcd60e51b815260206004820152601b60248201527f5374616b696e673a206e6f7420656e6f756768207265776172647300000000006044820152606401610278565b81600360008282546105ac9190610b32565b9250508190555080600460008282546105c59190610b32565b90915550506040805160a0810182526001808252602080830196875282840195865260608301948552426080840190815233600090815260059092529390209151825460ff1916901515178255945194810194909455915160028401555160038301555160049091015550565b6106666040518060a00160405280600015158152602001600081526020016000815260200160008152602001600081525090565b506001600160a01b0316600090815260056020908152604091829020825160a081018452815460ff161515815260018201549281019290925260028101549282019290925260038201546060820152600490910154608082015290565b600281815481106106d357600080fd5b600091825260209091200154905081565b600181815481106106d357600080fd5b6040516001600160a01b03831660248201526044810182905261075790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610865565b505050565b600080546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa1580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c99190610b5e565b6000549091506107e4906001600160a01b031633308661093a565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561082d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108519190610b5e565b905061085d8282610b4b565b949350505050565b60006108ba826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109789092919063ffffffff16565b90508051600014806108db5750808060200190518101906108db9190610bb0565b6107575760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610278565b6040516001600160a01b03808516602483015283166044820152606481018290526109729085906323b872dd60e01b90608401610720565b50505050565b606061085d848460008585600080866001600160a01b0316858760405161099f9190610bf6565b60006040518083038185875af1925050503d80600081146109dc576040519150601f19603f3d011682016040523d82523d6000602084013e6109e1565b606091505b50915091506109f2878383876109fd565b979650505050505050565b60608315610a6c578251600003610a65576001600160a01b0385163b610a655760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610278565b508161085d565b61085d8383815115610a815781518083602001fd5b8060405162461bcd60e51b81526004016102789190610c12565b60008060408385031215610aae57600080fd5b50508035926020909101359150565b600060208284031215610acf57600080fd5b81356001600160a01b0381168114610ae657600080fd5b9392505050565b600060208284031215610aff57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610b4557610b45610b1c565b92915050565b81810381811115610b4557610b45610b1c565b600060208284031215610b7057600080fd5b5051919050565b8082028115828204841417610b4557610b45610b1c565b600082610bab57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610bc257600080fd5b81518015158114610ae657600080fd5b60005b83811015610bed578181015183820152602001610bd5565b50506000910152565b60008251610c08818460208701610bd2565b9190910192915050565b6020815260008251806020840152610c31816040850160208701610bd2565b601f01601f1916919091016040019291505056fea2646970667358221220c516c5f364e504c2200128361ddf8b80872cbda172ba1cb8b9f04842e056d3fd64736f6c63430008120033",
  "devdoc": {
    "author": "kotsmile",
    "kind": "dev",
    "methods": {},
    "title": "Staking",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1475,
        "contract": "contracts/Staking.sol:Staking",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)664"
      },
      {
        "astId": 1482,
        "contract": "contracts/Staking.sol:Staking",
        "label": "periods",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1489,
        "contract": "contracts/Staking.sol:Staking",
        "label": "apy",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1494,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakedAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1496,
        "contract": "contracts/Staking.sol:Staking",
        "label": "reservedRewards",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1501,
        "contract": "contracts/Staking.sol:Staking",
        "label": "users",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Stake)1472_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)664": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Stake)1472_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Staking.Stake)",
        "numberOfBytes": "32",
        "value": "t_struct(Stake)1472_storage"
      },
      "t_struct(Stake)1472_storage": {
        "encoding": "inplace",
        "label": "struct Staking.Stake",
        "members": [
          {
            "astId": 1463,
            "contract": "contracts/Staking.sol:Staking",
            "label": "isStaked",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1465,
            "contract": "contracts/Staking.sol:Staking",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1467,
            "contract": "contracts/Staking.sol:Staking",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1469,
            "contract": "contracts/Staking.sol:Staking",
            "label": "reward",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1471,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}