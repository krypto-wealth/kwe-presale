/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface StakingInterface extends ethers.utils.Interface {
  functions: {
    'DENOMINATOR()': FunctionFragment
    'apy(uint256)': FunctionFragment
    'getUserStake(address)': FunctionFragment
    'legitMaxId()': FunctionFragment
    'periods(uint256)': FunctionFragment
    'reservedRewards()': FunctionFragment
    'rewardPool()': FunctionFragment
    'stake(uint256,uint256)': FunctionFragment
    'stakedAmount()': FunctionFragment
    'token()': FunctionFragment
    'unstake()': FunctionFragment
    'users(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'DENOMINATOR', values?: undefined): string
  encodeFunctionData(functionFragment: 'apy', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getUserStake', values: [string]): string
  encodeFunctionData(functionFragment: 'legitMaxId', values?: undefined): string
  encodeFunctionData(functionFragment: 'periods', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'reservedRewards', values?: undefined): string
  encodeFunctionData(functionFragment: 'rewardPool', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'stake',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'stakedAmount', values?: undefined): string
  encodeFunctionData(functionFragment: 'token', values?: undefined): string
  encodeFunctionData(functionFragment: 'unstake', values?: undefined): string
  encodeFunctionData(functionFragment: 'users', values: [string]): string

  decodeFunctionResult(functionFragment: 'DENOMINATOR', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'apy', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getUserStake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'legitMaxId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'periods', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'reservedRewards', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rewardPool', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stakedAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'users', data: BytesLike): Result

  events: {}
}

export class Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: StakingInterface

  functions: {
    DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>

    apy(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    getUserStake(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
          isStaked: boolean
          id: BigNumber
          amount: BigNumber
          reward: BigNumber
          timestamp: BigNumber
        }
      ]
    >

    legitMaxId(overrides?: CallOverrides): Promise<[BigNumber]>

    periods(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    reservedRewards(overrides?: CallOverrides): Promise<[BigNumber]>

    rewardPool(overrides?: CallOverrides): Promise<[BigNumber]>

    stake(
      amount_: BigNumberish,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    stakedAmount(overrides?: CallOverrides): Promise<[BigNumber]>

    token(overrides?: CallOverrides): Promise<[string]>

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isStaked: boolean
        id: BigNumber
        amount: BigNumber
        reward: BigNumber
        timestamp: BigNumber
      }
    >
  }

  DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>

  apy(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  getUserStake(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      isStaked: boolean
      id: BigNumber
      amount: BigNumber
      reward: BigNumber
      timestamp: BigNumber
    }
  >

  legitMaxId(overrides?: CallOverrides): Promise<BigNumber>

  periods(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  reservedRewards(overrides?: CallOverrides): Promise<BigNumber>

  rewardPool(overrides?: CallOverrides): Promise<BigNumber>

  stake(
    amount_: BigNumberish,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  stakedAmount(overrides?: CallOverrides): Promise<BigNumber>

  token(overrides?: CallOverrides): Promise<string>

  unstake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  users(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      isStaked: boolean
      id: BigNumber
      amount: BigNumber
      reward: BigNumber
      timestamp: BigNumber
    }
  >

  callStatic: {
    DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>

    apy(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getUserStake(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isStaked: boolean
        id: BigNumber
        amount: BigNumber
        reward: BigNumber
        timestamp: BigNumber
      }
    >

    legitMaxId(overrides?: CallOverrides): Promise<BigNumber>

    periods(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    reservedRewards(overrides?: CallOverrides): Promise<BigNumber>

    rewardPool(overrides?: CallOverrides): Promise<BigNumber>

    stake(
      amount_: BigNumberish,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    stakedAmount(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<string>

    unstake(overrides?: CallOverrides): Promise<void>

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isStaked: boolean
        id: BigNumber
        amount: BigNumber
        reward: BigNumber
        timestamp: BigNumber
      }
    >
  }

  filters: {}

  estimateGas: {
    DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>

    apy(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getUserStake(user: string, overrides?: CallOverrides): Promise<BigNumber>

    legitMaxId(overrides?: CallOverrides): Promise<BigNumber>

    periods(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    reservedRewards(overrides?: CallOverrides): Promise<BigNumber>

    rewardPool(overrides?: CallOverrides): Promise<BigNumber>

    stake(
      amount_: BigNumberish,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    stakedAmount(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>

    apy(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getUserStake(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    legitMaxId(overrides?: CallOverrides): Promise<PopulatedTransaction>

    periods(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    reservedRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rewardPool(overrides?: CallOverrides): Promise<PopulatedTransaction>

    stake(
      amount_: BigNumberish,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    stakedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    users(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
